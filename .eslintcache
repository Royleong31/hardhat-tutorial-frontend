[{"D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\index.js":"1","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\App.js":"2","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\ethereum.js":"3","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\ethersContext.js":"4","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\Child.js":"5","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\Transfer.js":"6","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\BuyTokens.js":"7","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\pages\\HomePage.js":"8","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\pages\\PurchasePage.js":"9","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\pages\\TransferPage.js":"10"},{"size":328,"mtime":1629453817223,"results":"11","hashOfConfig":"12"},{"size":8824,"mtime":1629471578410,"results":"13","hashOfConfig":"12"},{"size":777,"mtime":1629444727129,"results":"14","hashOfConfig":"12"},{"size":183,"mtime":1629442745811,"results":"15","hashOfConfig":"12"},{"size":1118,"mtime":1629470841225,"results":"16","hashOfConfig":"12"},{"size":1081,"mtime":1629472554852,"results":"17","hashOfConfig":"12"},{"size":1142,"mtime":1629471169857,"results":"18","hashOfConfig":"12"},{"size":458,"mtime":1629470655443,"results":"19","hashOfConfig":"12"},{"size":440,"mtime":1629471151903,"results":"20","hashOfConfig":"12"},{"size":807,"mtime":1629470608127,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1rik9jj",{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"24"},"D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\index.js",[],["50","51"],"D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\App.js",["52","53","54","55"],"import { useState, useEffect } from \"react\";\nimport Token from \"./Token.json\";\n\nimport getBlockchain from \"./ethereum.js\";\nimport EthersContext from \"./ethersContext.js\";\nimport { ethers, Contract } from \"ethers\";\n\nimport HomePage from \"./pages/HomePage.js\";\nimport PurchasePage from \"./pages/PurchasePage.js\";\nimport TransferPage from \"./pages/TransferPage.js\";\n\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\n// const HARDHAT_NETWORK_ID = \"31337\";\nconst HARDHAT_NETWORK_ID = \"4\";\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\nexport default function App() {\n\t// const [token, setToken] = useState(undefined);\n\tconst [tokenData, setTokenData] = useState(); // { name: \"\", symbol: \"\", totalSupply: 0, owner: \"\" }\n\tconst [userTokenBalance, setUserTokenBalance] = useState();\n\tconst [selectedAddress, setSelectedAddress] = useState();\n\tconst [txBeingSent, setTxBeingSent] = useState();\n\tconst [transactionError, setTransactionError] = useState();\n\tconst [networkError, setNetworkError] = useState();\n\n\tconst [provider, setProvider] = useState();\n\tconst [token, setToken] = useState();\n\tuseEffect(() => {\n\t\t// const init = async () => {\n\t\t// \tconst { token, signerAddress, provider } = await getBlockchain();\n\t\t// \tsetToken(token);\n\t\t// \tsetProvider(provider);\n\t\t// \tsetTokenData({\n\t\t// \t\tname: await token.name(),\n\t\t// \t\tsymbol: await token.symbol(),\n\t\t// \t\ttotalSupply: (await token.totalSupply()).toNumber(),\n\t\t// \t\towner: await token.owner(),\n\t\t// \t});\n\t\t// \tconst [selectedAddress] = await window.ethereum.enable();\n\t\t// \tsetSelectedAddress(selectedAddress);\n\t\t// \tsetUserTokenBalance((await token.balanceOf(selectedAddress)).toNumber());\n\t\t// };\n\t\t// init();\n\n\t\tconnectWallet();\n\t}, []);\n\n\tconst accountsChangedHandler = ([newAddress]) => {\n\t\tif (newAddress === undefined) return _resetState();\n\n\t\t_initialize();\n\t};\n\n\tconst networkChangeHandler = ([networkId]) => {\n\t\t// ?: The user will be asked to connect wallet again\n\t\t// TODO: Make sure the user reconnects wallet\n\t\t_resetState();\n\t\tconnectWallet();\n\t\tconsole.log(\"inside network changed listener\");\n\t};\n\n\tasync function connectWallet() {\n\t\t// ?: Remove any previous listeners to prevent outdated listeners from lingering after the network is changed\n\t\twindow.ethereum.removeListener(\"accountsChanged\", accountsChangedHandler);\n\t\twindow.ethereum.removeListener(\"networkChanged\", networkChangeHandler);\n\n\t\twindow.ethereum.on(\"accountsChanged\", accountsChangedHandler);\n\n\t\t// ?: Reset State if the network is changed\n\t\twindow.ethereum.on(\"networkChanged\", networkChangeHandler);\n\n\t\tconsole.log(\"connecting wallet\");\n\n\t\tif (_checkNetwork()) {\n\t\t\t_initialize();\n\t\t}\n\t}\n\n\t// ?: Runs when user connects wallet or when the user changes account\n\t// ?: store token contract in token, store the token symbol and name in tokenData, and update user's balance every 1s\n\tasync function _initialize() {\n\t\t// await _intializeContract(); // ?: store token contract in a variable\n\n\t\tawait window.ethereum.enable();\n\n\t\t// ?: Initialise contract and provider\n\t\tconst _provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\tconst signer = _provider.getSigner();\n\t\tconst signerAddress = await signer.getAddress();\n\n\t\tconst _token = new Contract(Token.address, Token.abi, signer);\n\n\t\t// set the states\n\t\tsetProvider(_provider);\n\t\tsetSelectedAddress(signerAddress);\n\t\tsetToken(_token);\n\n\t\tsetTokenData({\n\t\t\tname: await _token.name(),\n\t\t\tsymbol: await _token.symbol(),\n\t\t\ttotalSupply: (await _token.totalSupply()).toNumber(),\n\t\t\towner: await _token.owner(),\n\t\t});\n\n\t\t// !: _updateBalance does not work here. Maybe it's because it is run on the same render cycle so state is not updated\n\t\tconst balance = await _token.balanceOf(signerAddress);\n\t\tsetUserTokenBalance(balance);\n\t}\n\n\t// ?: Updates every 1s and also when transaction succeeds\n\tasync function _updateBalance() {\n\t\tconst balance = await token.balanceOf(selectedAddress);\n\t\tsetUserTokenBalance(balance);\n\t\tconsole.log(`updating balance: ${balance}`);\n\t}\n\n\t// TODO: In case user fails to connect wallet, connect again\n\tfunction _dismissNetworkError() {\n\t\tsetNetworkError();\n\t}\n\n\t// ?: This is an utility method that turns an RPC error into a human readable message.\n\tfunction _getRpcErrorMessage(error) {\n\t\tif (error.data) {\n\t\t\treturn error.data.message;\n\t\t}\n\n\t\treturn error.message;\n\t}\n\n\t// ?: Runs when either the account is deleted or the network is changed. User will\n\tfunction _resetState() {\n\t\tsetTokenData();\n\t\tsetUserTokenBalance();\n\t\tsetSelectedAddress();\n\t\tsetTxBeingSent();\n\t\tsetTransactionError();\n\t\tsetNetworkError();\n\t}\n\n\t// ?: Checks if selected network is Localhost:8545\n\tfunction _checkNetwork() {\n\t\tif (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n\t\t\treturn true;\n\t\t}\n\n\t\tsetNetworkError(\"Plese connect metamask to Rinkeby Test Network\");\n\n\t\treturn false;\n\t}\n\n\tasync function _transferTokens(to, amount) {\n\t\ttry {\n\t\t\t// ?: Remove any prior transaction errors\n\t\t\tsetTransactionError();\n\n\t\t\t// We send the transaction, and save its hash in the Dapp's state. This\n\t\t\t// way we can indicate that we are waiting for it to be mined.\n\t\t\t// ?: Store the tx hash. This function may throw an error, for example when the user tries to transfer more than he has\n\t\t\tconst tx = await token.transfer(to, amount);\n\t\t\t// ?: txBeingSent will be shown in a banner to tell the user that the transaction is mining\n\t\t\tsetTxBeingSent(tx.hash);\n\t\t\tconsole.log(tx);\n\n\t\t\t// We use .wait() to wait for the transaction to be mined. This method\n\t\t\t// returns the transaction's receipt.\n\t\t\tconst receipt = await tx.wait();\n\t\t\tconsole.log(receipt);\n\n\t\t\t// ?: if receipt.status === 0, it means that there's an error\n\t\t\tif (receipt.status === 0) {\n\t\t\t\t// We can't know the exact error that made the transaction fail when it\n\t\t\t\t// was mined, so we throw this generic one.\n\t\t\t\tthrow new Error(\"Transaction failed\");\n\t\t\t}\n\n\t\t\t// ?: Transaction succeeded, update balance as it has changed\n\t\t\tawait _updateBalance();\n\t\t} catch (error) {\n\t\t\t// We check the error code to see if this error was produced because the\n\t\t\t// user rejected a tx. If that's the case, we do nothing.\n\t\t\tif (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Other errors are logged and stored in the Dapp's state. This is used to\n\t\t\t// show them to the user, and for debugging.\n\t\t\tconsole.error(error);\n\t\t\tsetTransactionError(error);\n\t\t} finally {\n\t\t\t// ?: Remove the transaction loading banner\n\t\t\tsetTxBeingSent();\n\t\t}\n\t}\n\n\tasync function _buyTokens(tokenNum) {\n\t\ttry {\n\t\t\t// ?: Remove any prior transaction errors\n\t\t\tsetTransactionError();\n\t\t\tconst tx = await token.buyTokens(tokenNum, { value: ethers.utils.parseEther(tokenNum) });\n\n\t\t\t// ?: txBeingSent will be shown in a banner to tell the user that the transaction is mining\n\t\t\tsetTxBeingSent(tx.hash);\n\t\t\tconsole.log(tx);\n\t\t\tconst receipt = await tx.wait();\n\t\t\tconsole.log(receipt);\n\n\t\t\t// ?: if receipt.status === 0, it means that there's an error\n\t\t\tif (receipt.status === 0) {\n\t\t\t\t// We can't know the exact error that made the transaction fail when it\n\t\t\t\t// was mined, so we throw this generic one.\n\t\t\t\tthrow new Error(\"Transaction failed\");\n\t\t\t}\n\n\t\t\t// ?: Transaction succeeded, update balance as it has changed\n\t\t\tawait _updateBalance();\n\t\t} catch (error) {\n\t\t\t// We check the error code to see if this error was produced because the\n\t\t\t// user rejected a tx. If that's the case, we do nothing.\n\t\t\tconsole.log(error);\n\t\t\tif (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Other errors are logged and stored in the Dapp's state. This is used to\n\t\t\t// show them to the user, and for debugging.\n\t\t\tconsole.error(error);\n\t\t\tsetTransactionError(error);\n\t\t} finally {\n\t\t\t// ?: Remove the transaction loading banner\n\t\t\tsetTxBeingSent();\n\t\t}\n\t}\n\n\tif (networkError) {\n\t\tconsole.log(networkError);\n\t\treturn <h1>{networkError}</h1>;\n\t}\n\n\tif (transactionError) {\n\t\tconsole.log(transactionError);\n\t\treturn <h1>{_getRpcErrorMessage(transactionError)}</h1>;\n\t}\n\n\tif (!userTokenBalance || !tokenData || !selectedAddress) {\n\t\treturn \"Loading...\";\n\t}\n\n\treturn (\n\t\t<EthersContext.Provider value={{ account: selectedAddress, contract: token, provider }}>\n\t\t\t<div>\n\t\t\t\t<button onClick={connectWallet}>Connect Wallet</button>\n\n\t\t\t\t<h5>{txBeingSent ? txBeingSent : \"\"}</h5>\n\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/\" exact>\n\t\t\t\t\t\t<HomePage tokenData={tokenData} tokenBalance={userTokenBalance.toString()} />\n\t\t\t\t\t</Route>\n\n\t\t\t\t\t<Route path=\"/buy\" exact>\n\t\t\t\t\t\t<PurchasePage\n\t\t\t\t\t\t\ttokenData={tokenData}\n\t\t\t\t\t\t\ttokenBalance={userTokenBalance.toString()}\n\t\t\t\t\t\t\tonBuyTokens={_buyTokens}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\n\t\t\t\t\t<Route path=\"/transfer\" exact>\n\t\t\t\t\t\t<TransferPage\n\t\t\t\t\t\t\tonTransfer={_transferTokens}\n\t\t\t\t\t\t\ttokenData={tokenData}\n\t\t\t\t\t\t\ttokenBalance={userTokenBalance.toString()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</EthersContext.Provider>\n\t);\n}\n","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\ethereum.js",["56"],"import { ethers, Contract } from \"ethers\";\nimport Token from \"./Token.json\";\n\nconst getBlockchain = () =>\n\tnew Promise((resolve, reject) => {\n\t\twindow.addEventListener(\"load\", async () => {\n\t\t\tif (window.ethereum) {\n\t\t\t\t// ?: This enables the window.ethereum and also returns an array containing the address of the current account\n\t\t\t\tconst [address] = await window.ethereum.enable();\n\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst signerAddress = await signer.getAddress();\n\n\t\t\t\tconst token = new Contract(Token.address, Token.abi, signer);\n\n\t\t\t\tresolve({ signerAddress, token, provider });\n\t\t\t}\n\t\t\tresolve({ signerAddress: undefined, token: undefined });\n\t\t});\n\t});\n\nexport default getBlockchain;\n","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\ethersContext.js",[],"D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\Child.js",["57","58"],"import { useEffect, useContext, useState } from \"react\";\r\nimport EthersContext from \"./ethersContext\";\r\nimport { ethers, Contract } from \"ethers\";\r\n\r\nexport default function Child({ name, symbol, totalSupply, owner, tokenBalance }) {\r\n\tconst { account, contract, provider } = useContext(EthersContext);\r\n\t// const [tokenBalance, setTokenBalance] = useState(\"0\");\r\n\tconst [ethBalance, setEthBalance] = useState(\"0\");\r\n\r\n\tuseEffect(() => {\r\n\t\t// console.log('inside useEffect of child.js');\r\n\t\t// contract.balanceOf(account).then(bal => {\r\n\t\t// \tsetTokenBalance(bal.toString());\r\n\t\t// });\r\n\r\n\t\tprovider.getBalance(account).then(bal => {\r\n\t\t\tconst balanceInEth = ethers.utils.formatEther(bal);\r\n\t\t\tsetEthBalance(balanceInEth);\r\n\t\t});\r\n\t\t// ?: account needs to be a dependency otherwise it will not change when the account changes\r\n\t}, [account]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<hr />\r\n\t\t\t<h5>Contract Address: {contract.address}</h5>\r\n\t\t\t<h3>Current user account: {account}</h3>\r\n\t\t\t<h6>\r\n\t\t\t\tAccount token Balance: {tokenBalance} {symbol}\r\n\t\t\t</h6>\r\n\t\t\t<h6>Ether balance: {ethBalance} ETH</h6>\r\n\t\t\t<hr />\r\n\t\t</div>\r\n\t);\r\n}\r\n","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\Transfer.js",["59","60","61"],"import { useRef, useContext } from \"react\";\r\nimport EthersContext from \"./ethersContext\";\r\n\r\nexport default function Transfer({ onTransfer }) {\r\n\tconst { account, contract, provider } = useContext(EthersContext);\r\n\tconst toRef = useRef();\r\n\tconst amountRef = useRef();\r\n\r\n\tconst submitHandler = async event => {\r\n\t\tevent.preventDefault();\r\n\t\tconst transferToAdd = toRef.current.value;\r\n\t\tconst amount = amountRef.current.value;\r\n\t\tconsole.log(`Amount: ${amount}`);\r\n\t\tconsole.log(`Transfer to: ${transferToAdd}`);\r\n\r\n\t\t// const tx = await contract.transfer(transferToAdd, amount);\r\n\t\t// console.log(tx);\r\n\t\t// const receipt = await tx.wait();\r\n\t\t// console.log(receipt);\r\n\t\tonTransfer(transferToAdd, amount);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={submitHandler}>\r\n\t\t\t<div>\r\n\t\t\t\t<label htmlFor=\"to\">Transfer To</label>\r\n\t\t\t\t<input ref={toRef} type=\"text\" name=\"to\" />\r\n\t\t\t</div>\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<label htmlFor=\"amount\">Amount</label>\r\n\t\t\t\t<input ref={amountRef} type=\"number\" name=\"amount\" id=\"amount\" />\r\n\t\t\t</div>\r\n\r\n\t\t\t<button type=\"submit\">Transfer</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n","D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\BuyTokens.js",["62","63","64","65","66"],"import { useState, useContext, useRef } from \"react\";\r\nimport EthersContext from \"./ethersContext\";\r\nimport { ethers, Contract } from \"ethers\";\r\n\r\nexport default function BuyTokens({ name, symbol, totalSupply, owner }) {\r\n\tconst { account, contract, provider } = useContext(EthersContext);\r\n\tconst [tokenPrice, setTokenPrice] = useState();\r\n\tconst tokenNumRef = useRef();\r\n\r\n\tconst submitHandler = async event => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconst tokenNum = tokenNumRef.current.value;\r\n\t\tconst amtToBePaid = ethers.utils.parseEther(tokenNum);\r\n\r\n\t\ttry {\r\n\t\t\tconst tx = await contract.buyTokens(tokenNum, { value: amtToBePaid });\r\n\r\n\t\t\tconsole.log(tx);\r\n\t\t\tconst receipt = await tx.wait(tx);\r\n\t\t\tconsole.log(receipt);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error.data.message);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={submitHandler}>\r\n\t\t\t<p>Token Price: 1 ETH</p>\r\n\r\n\t\t\t<label htmlFor=\"numOfTokens\">Number of Tokens</label>\r\n\t\t\t<input ref={tokenNumRef} type=\"number\" name=\"numOfTokens\" id=\"numOfTokens\" />\r\n\r\n\t\t\t<button type=\"submit\">Buy Tokens</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n",["67","68"],"D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\pages\\HomePage.js",[],"D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\pages\\PurchasePage.js",[],"D:\\Udemy Courses\\Solidity\\Youtube Courses\\hardhat-tutorial\\frontend\\src\\pages\\TransferPage.js",["69","70","71","72","73"],"import Transfer from \"../Transfer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Child from \"../Child\";\r\n\r\nimport { useEffect, useContext, useState } from \"react\";\r\nimport EthersContext from \"./../ethersContext\";\r\nimport { ethers, Contract } from \"ethers\";\r\n\r\nexport default function TransferPage({ tokenData, onTransfer, tokenBalance }) {\r\n\tconst { account, contract, provider } = useContext(EthersContext);\r\n\tconst [owner, setOwner] = useState();\r\n\r\n\tuseEffect(() => {\r\n\t\tcontract.owner().then(o => {\r\n\t\t\tsetOwner(o.toString());\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1>Transfer Tokens</h1>\r\n\r\n\t\t\t<Child {...tokenData} tokenBalance={tokenBalance} />\r\n\r\n\t\t\t<p>Owner: {owner}</p>\r\n\r\n\t\t\t<Transfer onTransfer={onTransfer} />\r\n\t\t\t<Link to=\"/\">Home</Link>\r\n\t\t\t<Link to=\"/buy\">Buy</Link>\r\n\t\t</>\r\n\t);\r\n}\r\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":4,"column":8,"nodeType":"80","messageId":"81","endLine":4,"endColumn":21},{"ruleId":"78","severity":1,"message":"82","line":12,"column":25,"nodeType":"80","messageId":"81","endLine":12,"endColumn":33},{"ruleId":"83","severity":1,"message":"84","line":47,"column":5,"nodeType":"85","endLine":47,"endColumn":7,"suggestions":"86"},{"ruleId":"78","severity":1,"message":"87","line":119,"column":11,"nodeType":"80","messageId":"81","endLine":119,"endColumn":31},{"ruleId":"78","severity":1,"message":"88","line":9,"column":12,"nodeType":"80","messageId":"81","endLine":9,"endColumn":19},{"ruleId":"78","severity":1,"message":"89","line":3,"column":18,"nodeType":"80","messageId":"81","endLine":3,"endColumn":26},{"ruleId":"83","severity":1,"message":"90","line":21,"column":5,"nodeType":"85","endLine":21,"endColumn":14,"suggestions":"91"},{"ruleId":"78","severity":1,"message":"92","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":17},{"ruleId":"78","severity":1,"message":"93","line":5,"column":19,"nodeType":"80","messageId":"81","endLine":5,"endColumn":27},{"ruleId":"78","severity":1,"message":"94","line":5,"column":29,"nodeType":"80","messageId":"81","endLine":5,"endColumn":37},{"ruleId":"78","severity":1,"message":"89","line":3,"column":18,"nodeType":"80","messageId":"81","endLine":3,"endColumn":26},{"ruleId":"78","severity":1,"message":"92","line":6,"column":10,"nodeType":"80","messageId":"81","endLine":6,"endColumn":17},{"ruleId":"78","severity":1,"message":"94","line":6,"column":29,"nodeType":"80","messageId":"81","endLine":6,"endColumn":37},{"ruleId":"78","severity":1,"message":"95","line":7,"column":9,"nodeType":"80","messageId":"81","endLine":7,"endColumn":19},{"ruleId":"78","severity":1,"message":"96","line":7,"column":21,"nodeType":"80","messageId":"81","endLine":7,"endColumn":34},{"ruleId":"74","replacedBy":"97"},{"ruleId":"76","replacedBy":"98"},{"ruleId":"78","severity":1,"message":"99","line":7,"column":10,"nodeType":"80","messageId":"81","endLine":7,"endColumn":16},{"ruleId":"78","severity":1,"message":"89","line":7,"column":18,"nodeType":"80","messageId":"81","endLine":7,"endColumn":26},{"ruleId":"78","severity":1,"message":"92","line":10,"column":10,"nodeType":"80","messageId":"81","endLine":10,"endColumn":17},{"ruleId":"78","severity":1,"message":"94","line":10,"column":29,"nodeType":"80","messageId":"81","endLine":10,"endColumn":37},{"ruleId":"83","severity":1,"message":"100","line":17,"column":5,"nodeType":"85","endLine":17,"endColumn":7,"suggestions":"101"},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'getBlockchain' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'connectWallet'. Either include it or remove the dependency array.","ArrayExpression",["104"],"'_dismissNetworkError' is defined but never used.","'address' is assigned a value but never used.","'Contract' is defined but never used.","React Hook useEffect has a missing dependency: 'provider'. Either include it or remove the dependency array.",["105"],"'account' is assigned a value but never used.","'contract' is assigned a value but never used.","'provider' is assigned a value but never used.","'tokenPrice' is assigned a value but never used.","'setTokenPrice' is assigned a value but never used.",["102"],["103"],"'ethers' is defined but never used.","React Hook useEffect has a missing dependency: 'contract'. Either include it or remove the dependency array.",["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [connectWallet]",{"range":"113","text":"114"},"Update the dependencies array to be: [account, provider]",{"range":"115","text":"116"},"Update the dependencies array to be: [contract]",{"range":"117","text":"118"},[1700,1702],"[connectWallet]",[832,841],"[account, provider]",[548,550],"[contract]"]